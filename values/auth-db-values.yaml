# 1. Base Configuration (for a unique service)
fullnameOverride: auth-db
auth:
  # The initial database and user to be created
  database: auth_db
  username: auth_user
  # It's best practice to use Kubernetes Secrets, but for a simple Minikube demo,
  # you can set the passwords directly (use actual secrets in production!)
  password: "auth-pass"
  postgresPassword: "auth-root-pass"

image:
  registry: docker.io
  repository: bitnamisecure/postgresql
  tag: "latest"

global.security.allowInsecureImages: true

# 2. Persistent Volume (Использование persistent volume)
persistence:
  enabled: true
  # Minikube usually has a default StorageClass, which will handle the volume
  size: 5Gi

# 3. Max Connections (Конфигурация макс количества соединений)
# The default is 100. Configure a new limit.
postgresql:
  parameters:
    max_connections: 200 # Set to your desired maximum

# 4. Monitoring User (Создание пользователя для считывания данных мониторингом)
# Create a dedicated user for the PostgreSQL Exporter (used by Signoz/Prometheus)
# This user needs to be created after the primary user.
# Bitnami chart allows this via the `initdbScripts` feature.
# We'll create a user 'monitor_user' and grant minimal permissions.
initdbScripts:
  monitoring-user.sh: |
    #!/bin/bash
    set -e
    # Wait for the database to be ready
    /opt/bitnami/postgresql/bin/pg_isready -h 127.0.0.1 -p 5432 -t 10

    # Create the monitoring user
    psql -U $POSTGRES_USER -d $POSTGRES_DATABASE -c "CREATE USER monitor_user WITH PASSWORD 'your-monitoring-password';"

    # Grant minimal permissions needed for monitoring queries
    psql -U $POSTGRES_USER -d $POSTGRES_DATABASE -c "GRANT pg_monitor TO monitor_user;"

# 5. PostgreSQL Exporter (for Signoz/Prometheus)
# Enable the bundled postgres-exporter which Signoz/Prometheus will scrape
metrics:
  enabled: true
  # Pass the monitoring user credentials to the exporter
  postgresql:
    username: monitor_user
    password: "12345678"
